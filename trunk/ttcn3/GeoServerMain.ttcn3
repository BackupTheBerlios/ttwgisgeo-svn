module GeoServerMain {
	import from GISClientRequestTemplates all;
	
	type port GISClientUpperInterfacePort message {
		out all;
		in all;
	}
	 
	type component GISClientUpperInterfaceComponent {
		port GISClientUpperInterfacePort clientPort;
		timer localTimer := 15.0;	 
	}
	
	type component TSIcomponent  {
		port GISClientUpperInterfacePort tsiPort;
	}
	
	//used as the city to be returned from the retrieve functions when an error happens
	template CityType defaultCity :=  {
		requestType := "",
		cityName := "",
		latitude := "0.0",
		longitude := "0.0",
		adminName := "",
		countryName := "",
		status := "",
		popClass := ""
	}
	
	template CityType anyCity := {
		requestType := ?,
		cityName := ?,
		latitude := ?,
		longitude := ?,
		adminName := ?,
		countryName := ?,
		status := ?,
		popClass := ?		
	}
	
	/*
		Insert the city using the GISClient interface. 
		Returns 'SUCCESS' if the insert was successfull or 'ERROR' otherwise.
	 */
	function insertCityUsingGISClient(CityType city) runs on GISClientUpperInterfaceComponent  return charstring {
		template charstring replyFromServer := ?;
		var charstring result := "";
		template CityType addCity modifies city := {
			requestType := "addCityGIS"
		}
		clientPort.send(addCity);
		localTimer.start;
		alt {
			[] clientPort.receive(replyFromServer) -> value result {				
				localTimer.stop;
			}
			[] clientPort.receive {
				result := "ERROR";
				localTimer.stop;
			} 
			[] localTimer.timeout {
				result := "ERROR";
			}			
		}
		return result;		
	}
	/* 
		Insert the city directly to the GEOServer using the WFS
		Returns 'SUCCESS' if the insert was successfull or 'ERROR' otherwise.
	*/
	function insertCityAtGEOServer(CityType city) runs on GISClientUpperInterfaceComponent return charstring {
		template charstring replyFromServer := ?;
		var charstring result := "";
		template CityType addCity modifies city := {
			requestType := "addCityGEO"
		}
		clientPort.send(addCity);
		localTimer.start;
		alt {
			[] clientPort.receive(replyFromServer) -> value result {				
				localTimer.stop;
			}
			[] clientPort.receive {
				result := "ERROR";
				localTimer.stop;
			} 
			[] localTimer.timeout {
				result := "ERROR";
			}			
		}
		return result;		
		
	}

	/* 
		Replace the details of oldCity with those of newCity
		Returns 'SUCCESS' if the insert was successfull or 'ERROR' otherwise.
	*/
	function updateCityUsingGISClient(CityType oldCity, CityType newCity) runs on GISClientUpperInterfaceComponent return charstring  {
		template charstring replyFromServer := ?;
		var charstring result := "";
		template UpdateCity updateDetails := {
			requestType := "updateCity",
			oldCityName := oldCity.cityName,
			oldLatitude :=oldCity.latitude,
			oldLongitude := oldCity.longitude,
			oldAdminName := oldCity.adminName,
			oldCountryName := oldCity.countryName,
			oldStatus := oldCity.status,
			oldPopClass := oldCity.popClass,
			newCityName := newCity.cityName,
			newLatitude := newCity.latitude,
			newLongitude := newCity.longitude,
			newAdminName := newCity.adminName,
			newCountryName := newCity.countryName,
			newStatus := newCity.status,
			newPopClass := newCity.popClass
		}
		clientPort.send(updateDetails);
		localTimer.start;
		alt {
			[] clientPort.receive(replyFromServer) -> value result {				
				localTimer.stop;
			}
			[] clientPort.receive {
				result := "ERROR";
				localTimer.stop;
			} 
			[] localTimer.timeout {
				result := "ERROR";
			}			
		}
		return result;		
	}
	
	/* 
		Delete the city using the GISClient interface
		Returns 'SUCCESS' if the insert was successfull or 'ERROR' otherwise.
	*/
	function deleteCityUsingGISClient(CityType city) runs on GISClientUpperInterfaceComponent return charstring  {
		template charstring replyFromServer := ?;
		var charstring result := "";
		template CityType cityToSend modifies city := {
			requestType := "deleteGIS"
		}
		clientPort.send(cityToSend);
		localTimer.start;
		alt {
			[] clientPort.receive(replyFromServer) -> value result {				
				localTimer.stop;
			}
			[] clientPort.receive {
				result := "ERROR";
				localTimer.stop;
			} 
			[] localTimer.timeout {
				result := "ERROR";
			}			
		}
		return result;			
	}
	
	/* 
		Delete the city using the WFS at GEOServer
		Returns 'SUCCESS' if the insert was successfull or 'ERROR' otherwise.
	*/
	function deleteCityAtGEOServer(CityType city) runs on GISClientUpperInterfaceComponent return charstring  {
		template charstring replyFromServer := ?;
		var charstring result := "";
		template CityType cityToSend modifies city := {
			requestType := "deleteGEO"
		}
		clientPort.send(cityToSend);
		localTimer.start;
		alt {
			[] clientPort.receive(replyFromServer) -> value result {				
				localTimer.stop;
			}
			[] clientPort.receive {
				result := "ERROR";
				localTimer.stop;
			} 
			[] localTimer.timeout {
				result := "ERROR";
			}			
		}
		return result;		
	}
	
	/* 
		Ask the GEOServer whether this city exists
		Returns the city retrieved.
	*/
	function retrieveCityFromGEOServer(CityType city) runs on GISClientUpperInterfaceComponent return CityType {
		template CityType cityToSend modifies city := {
			requestType := "retrieveCity"
		}
		template charstring anyChar:= ?;
		var charstring msg := "";
		var CityType result;
		clientPort.send(cityToSend);
		localTimer.start;
		alt {
			[] clientPort.receive(anyCity) -> value result {				
				localTimer.stop;
			}
			[] clientPort.receive(anyChar) -> value msg  {
				localTimer.stop;
			} 
			[] clientPort.receive {
				localTimer.stop;
			} 
			[] localTimer.timeout {
			}			
		}
		log(msg);
		if (msg == "") {
			return result;
		} else {
			log("Could not find city");
			return defaultCity;			
		}
		return result;
	}
	
	function retrieveCityFromGISClient(CityType cityType) runs on GISClientUpperInterfaceComponent return CityType {
		template CityType cityToSend modifies cityType := {
			requestType := "retrieveCityGIS"
		}
		template charstring anyChar:= ?;
		var charstring msg := "";
		var CityType result;
		clientPort.send(cityToSend);
		localTimer.start;
		alt {
			[] clientPort.receive(anyCity) -> value result {				
				localTimer.stop;
			}
			[] clientPort.receive {
				localTimer.stop;
			} 
			[] localTimer.timeout {
			}			
		}
		log(msg);
		if (msg == "") {
			return result;
		} else {
			log("Could not find city");
			return defaultCity;			
		}
		return result;		
	}	
	
	/* To test the insert  of the GISClient:
	   1. Attempt to retrieve the city to verify it does not already exist
	   2. Insert the city using the GISClient
	   3. Retrieve the city directly from GEOServer
	   4. Delete the city directly at GEOServer so that the server will be in the same condition		 
	*/ 
	testcase insertCity(CityType cityToInsert) runs on GISClientUpperInterfaceComponent system TSIcomponent {		
		log("Mapping ports...");
		map(mtc:clientPort,system:tsiPort);
		var CityType retrieved := retrieveCityFromGEOServer(cityToInsert);
		var boolean matchesWithDefault := match(retrieved, defaultCity);
		if (matchesWithDefault) {
			log("City does not previously exist");	
			var charstring insertResult := insertCityUsingGISClient(cityToInsert);
			if (insertResult == "SUCCESS") {
				log("GISClient reported succesfull insertion.");
				var CityType verifyCity := retrieveCityFromGEOServer(cityToInsert);
				template CityType verifyCityNoAction modifies verifyCity := {
					requestType := ""
				}
				var boolean cityInserted := match(verifyCityNoAction, cityToInsert);
				if (cityInserted) {
					log("The city was successfully inserted.");
					setverdict(pass);			
				} else {
					log("Error: The city was not inserted.");
					setverdict(fail);	
				}
				var charstring deleteResponse := deleteCityAtGEOServer(cityToInsert);
				if (deleteResponse == "SUCCESS") {
					log("City deleted in order to restore the system to its initial condition.");
				} else {
					log("Could not delete city.")
				}	
			} else {
				log("GISClient reported error during insertion.");
				setverdict(inconc);
			}
		} else {
			log("Error. The city already exists! Please delete it!");
			setverdict(inconc);
		}
		unmap(mtc:clientPort,system:tsiPort);
	}
	
	
	
	/* This test attempts to insert a city that has erroneous values:
	   1. Attempt to retrieve the city to verify it does not already exist
	   2. Insert the city using the GISClient
	   3. Retrieve the city directly from GEOServer
	   4. Delete the city directly at GEOServer so that the server will be in the same condition		 
	*/ 
	testcase insertCity2(CityType cityToInsert) runs on GISClientUpperInterfaceComponent system TSIcomponent {		
		log("Mapping ports...");
		map(mtc:clientPort,system:tsiPort);		
		var charstring insertResult := insertCityUsingGISClient(cityToInsert);
		if (insertResult == "ERROR") {
			log("GISClient reported an error during insertion.");
			var CityType verifyCity := retrieveCityFromGEOServer(cityToInsert);
			template CityType verifyCityNoAction modifies verifyCity := {
				requestType := ""
			}
			var boolean cityInserted := match(verifyCityNoAction, cityToInsert);
			if (cityInserted) {
				log("The city was retrieved.");
				setverdict(fail);			
			} else {
				log("The city was not inserted.");
				setverdict(pass);	
			}
		} else {
			log("GISClient reported error during insertion.");
			setverdict(inconc);
		}		
		unmap(mtc:clientPort,system:tsiPort);
	}
	
	
	/*
		Test the update functionality of a city
		1. Insert a city directly at the GEOServer
		2. Update some of it's details
		3. Retrieve the updated city and 
		4. If the retrieved city's details match with the updated city's details match then
		   the test passes otherwise it fails.
	 */
	testcase updateCity(CityType initialCity, CityType updatedCity) runs on GISClientUpperInterfaceComponent system TSIcomponent {
		log("Mapping ports...");
		map(mtc:clientPort,system:tsiPort);
		log("Inserting a new city directly at GEOServer.");
		var charstring insertCityResult :=  insertCityAtGEOServer(initialCity);
		if (insertCityResult == "SUCCESS") {
			log("Initial city inserted. Updating city details...");
			var charstring updateResult := updateCityUsingGISClient(initialCity, updatedCity);	
			if (updateResult == "SUCCESS") {
				log("GISClient reported city update OK.");
				var CityType returnedCity := retrieveCityFromGEOServer(updatedCity);
				template CityType returnedCityNoAction modifies returnedCity := {
					requestType := ""
				}
				var boolean citiesMatch := match(returnedCityNoAction, updatedCity);
				if (citiesMatch) {
					log("The updated city was retrieved from GEOServer.");
					setverdict(pass);			
				} else {
					log("The updated city could not be retrieved.");
					setverdict(fail);
				}				
			} else {
				log("GISClient reported error during city update.");
				setverdict(fail);
			}
			var charstring deleteResponse := deleteCityAtGEOServer(updatedCity);
			if (deleteResponse == "SUCCESS") {
				log("City deleted in order to restore the system to its initial condition.");
			} else {
				log("Could not delete city.")
			}	
		} else {
			log("Error. Could not enter the initial city.");
			setverdict(inconc);
		}
		unmap(mtc:clientPort,system:tsiPort);	
	}
	
	/*
		Attempt to update an existing city with erroneous values
		1. Insert a city directly at the GEOServer
		2. Update some of it's details with malformed data
		3. If the update is successfiul then the test case fails
	 */
	testcase updateCity2(CityType initialCity, CityType updatedCity) runs on GISClientUpperInterfaceComponent system TSIcomponent {
		log("Mapping ports...");
		map(mtc:clientPort,system:tsiPort);
		log("Inserting a new city directly at GEOServer.");
		var charstring insertCityResult :=  insertCityAtGEOServer(initialCity);
		if (insertCityResult == "SUCCESS") {
			log("Initial city inserted. Updating city details...");
			var charstring updateResult := updateCityUsingGISClient(initialCity, updatedCity);
			if (updateResult == "ERROR") {
				log("GISClient reported error while updateing with malformed data.");
				setverdict(pass);
			} else {
				log("GISClient reported success while updating with malformed data.");
				setverdict(fail);
			}
			var charstring deleteResponse := deleteCityAtGEOServer(initialCity);
			if (deleteResponse == "SUCCESS") {
				log("City deleted in order to restore the system to its initial condition.");
			} else {
				log("Could not delete city.")
			}	
		} else {
			log("Error. Could not enter the initial city.");
			setverdict(inconc);
		}
		unmap(mtc:clientPort,system:tsiPort);	
	}
	
	/*
		Test deleting a city.
		1. Insert a new city directly at GEOServer
		2. Delete it using GISClient
		3. Attempt to retrieve it from GEOServer
		4. If it still exists then the test fails, otherwise it's successful.
	 */
	testcase deleteCity(CityType aCity) runs on GISClientUpperInterfaceComponent system TSIcomponent {
		log("Mapping ports...");
		map(mtc:clientPort,system:tsiPort);
		log("Inserting a new city directly at GEOServer.");
		var charstring insertCityResult :=  insertCityAtGEOServer(aCity);
		if (insertCityResult == "SUCCESS") {
			log("City succesfully inserted at GEOServer");
			var charstring deleteCityResult := deleteCityUsingGISClient(aCity);
			if (deleteCityResult == "SUCCESS")  {
				log("GISClient reported succeful deletion of city. Attempting to retrieve it from GEOServer");
				var CityType retrieved := retrieveCityFromGEOServer(aCity);
				log(retrieved);
				template CityType retrievedCityNoAction modifies retrieved := {
					requestType := ""
				}
				log("default city:");
				log(defaultCity);
				log("received city:");
				log(retrievedCityNoAction); 
				var boolean matchesWithDefault := match(retrievedCityNoAction, defaultCity);
				if (matchesWithDefault) {
					log("City successfully deleted from GEOServer");
					setverdict(pass);
				} else {
					log("Error. The city was not deleted!");
					setverdict(fail);
				}
			} else {
				log("GISClient reported an error while deleting the city.");
				setverdict(fail);
			}
			var charstring deleteResponse := deleteCityAtGEOServer(aCity);
			if (deleteResponse == "SUCCESS") {
				log("City deleted in order to restore the system to its initial condition.");
			} else {
				log("Could not delete city.")
			}	
		} else {
			log("Could not insert city at GEOServer.");
			setverdict(inconc);
		}
		unmap(mtc:clientPort,system:tsiPort);	
	}
	
	/*
		Test deleting a city.
		1. Insert a new city directly at GEOServer
		2. Delete it using GISClient
		3. Attempt to retrieve it from GEOServer
		4. If it still exists then the test fails, otherwise it's successful.		
	 */
	testcase deleteCity2(CityType aCity) runs on GISClientUpperInterfaceComponent system TSIcomponent {
		log("Mapping ports...");
		map(mtc:clientPort,system:tsiPort);
		var CityType retrieved := retrieveCityFromGEOServer(aCity);
		template CityType retrievedCityNoAction modifies retrieved := {
			requestType := ""
		}
		var boolean matchesWithDefault := match(retrievedCityNoAction, defaultCity);
		if (matchesWithDefault) {
			log("City does not exist. Attempting to delete it with GISClient.");
			var charstring deleteCityResult := deleteCityUsingGISClient(aCity);
			if (deleteCityResult == "ERROR")  {
				log("GISClient reported an error while deleting a non-existing City.");
				setverdict(pass);	
			} else {
				log("GISClient reported success while deleting a non existing City.");
				setverdict(fail);
			}			
		} else {
			log("Error. The city already exists at GEOServer.");
			setverdict(inconc);
		}
		unmap(mtc:clientPort,system:tsiPort);	
	}
	/* Test if the interface displays a city correctly 
	   1. Insert a city directly at the GEOServer
	   2. Retrieve the city from the GISClient interface
	   3. If the city exists then the test passes otherwise it fails.	   
	*/
	testcase retrieveCity(CityType aCity) runs on GISClientUpperInterfaceComponent system TSIcomponent {
		map(mtc:clientPort,system:tsiPort);	
		log("Inserting a new city directly at GEOServer.");
		var charstring insertCityResult :=  insertCityAtGEOServer(aCity);
		if (insertCityResult == "SUCCESS") {
			log("City inserted at GEOServer.");			
			var CityType returnedCity := retrieveCityFromGISClient(aCity);
			template CityType returnedCityNoAction modifies returnedCity := {
				requestType := ""
			} 
			var boolean cityMatch := match(returnedCityNoAction, aCity);	
			if (cityMatch) {
				log("Match successful");
				setverdict(pass);
			} else {
				log("The retrieved country does not match.");
				setverdict(fail);
			}
			var charstring deleteResponse := deleteCityAtGEOServer(aCity);
			if (deleteResponse == "SUCCESS") {
				log("City deleted in order to restore the system to its initial condition.");
			} else {
				log("Could not delete city.");
			}	
		} else {
			log("Error. Cannot insert city in GEOServer");
			setverdict(inconc);
		}
		unmap(mtc:clientPort,system:tsiPort);		
	}
	
	/* Attempt to retrieve a city that does not exist in GEOServer
	   1. Insert a city directly at the GEOServer.
	   2. Retrieve the city from the GISClient interface.
	   3. If the city exists then the test passes otherwise it fails.	   
	*/
	testcase retrieveCity2(CityType aCity) runs on GISClientUpperInterfaceComponent system TSIcomponent {
		map(mtc:clientPort,system:tsiPort);	
		var CityType retrieved := retrieveCityFromGEOServer(aCity);
		template CityType retrievedCityNoAction modifies retrieved := {
			requestType := ""
		}
		var boolean matches := match(retrievedCityNoAction, aCity);
		if (not matches) {
			log("The city does not exist in GEOServer. Attempting to retrieve it from GISClient");
			var CityType returnedCity := retrieveCityFromGISClient(aCity);
			template CityType returnedCityNoAction modifies returnedCity := {
				requestType := ""
			} 
			var boolean cityMatch := match(defaultCity, aCity);
			if (cityMatch) {
				log("A city was returned.");
				setverdict(fail);
			} else {
				log("Could not retrieve city. The test is successful");
				setverdict(pass);
			}
		} else {
			log("Error. The city already exists. Cannot proceed with testing!");
			setverdict(inconc);
		}
		unmap(mtc:clientPort,system:tsiPort);			
	}
	
	control {
		template CityType cityWithCorrectData :=  {
			requestType := "",
			cityName := "Glenorchy",
			latitude := "-41.3",
			longitude := "141.2",
			adminName := "Tasmania",
			countryName := "Tasmania",
			status := "status",
			popClass := "popClass"
		}
		
		template CityType cityWithErroneousData :=  {
			requestType := "",
			cityName := "",
			latitude := "",
			longitude := "",
			adminName := "Tasmania",
			countryName := "Tasmania",
			status := "status",
			popClass := "popClass"
		}		
		template CityType updatedCityWithCorrectData :=  {
			requestType := "",
			cityName := "Glenorchy",
			latitude := "-45.3",
			longitude := "140.2",
			adminName := "Tasmania",
			countryName := "Australia",
			status := "status",
			popClass := "popClass"
		}	
		log("Execute 'Create City' with correct data");
		execute(insertCity(cityWithCorrectData));
		log("Execute 'Create City' with malformed data");
		execute(insertCity2(valueof(cityWithErroneousData)));
		log("Execute 'Retrieve City' with correct data");
		execute(retrieveCity(valueof(cityWithCorrectData)));
		log("Execute 'Create City' with erroneous data");
		execute(retrieveCity2(valueof(cityWithCorrectData)));
		log("Execute 'Update City' with correct data");
		execute(updateCity(valueof(cityWithCorrectData), valueof(updatedCityWithCorrectData)));
		log("Execute 'Update City' with erroneous data");
		execute(updateCity2(valueof(cityWithCorrectData), valueof(cityWithErroneousData)));
		log("Execute 'Delete City' with correct data");
		execute(deleteCity(valueof(cityWithCorrectData)));
		log("Execute 'Delete City' with erroneous data");
		execute(deleteCity2(valueof(cityWithCorrectData)));
	}

}